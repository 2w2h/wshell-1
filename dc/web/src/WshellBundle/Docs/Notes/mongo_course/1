### Intro

MongoDb - это нереляционная база данных (т.е. без зависимостей между элементами).
Все сущности в ней хранятся в виде JSON объектов(т.н. документов), объединённых в коллекции.
Пример JSON объекта:

	{"name":"Jordan", "a":1, "b":2, "c":3, "fruit":["apple","banana","pear"]}

Или в более читабельном виде:

	{
		"name" : "Jordan",
		"a" : 1,
		"b" : 2,
		"c" : 3,
		"fruit" : [
			"apple",
			"banana",
			"pear"
		]
	}


Главная особенность Mongo в том, что каждый документ имеет динамическую структуру,
которую можно изменять независимо от других документов в коллекции.
Также Mongo сочетает в себе высокую производительность и гибкость.
Для этого мы избавляемся от некоторых привычных фич, как Joins и Transactions.

Сама mongoDb это демон, который висит в памяти и обрабатывает запросы на 
создание/чтение/редактирование/удаление данных (совокупность этих стандартных операций называется CRUD).

Для создания запросов к mongo можно использовать встроенный консольный клиент (Mongo Shell) или один из
основных языков программирования (первый вариант обычно используется для обучения и отладки, второй - в реальных проектах).

Каждому новому документу автоматически присваивается уникальный идентификатор.


### Js в Mongo

В mongo shell можно объявить переменную:

	# темповая переменная j
	var j = db.names.findOne()
	j.name = "Tim"
	# сохраняем назад в бд
	db.names.save(j)

Таким образом, можно например сохранить переменную с одним локументом
в одно из полей другого документа.
Более того, все встроенные функции в mongo написаны на java script.
(Например, попробуйте ввести просто db.find, без скобок)
Сами данные хранятся в формате BSON, клиенты ЯП таже используют этот формат.

Не никаких особенных ограничений на вложженность документов, за исключением лимита в 16Mb на 1 документ.


Коротоко по Python:
things = ["apples", "orange", "pear", "grape", "kiwi"] - список
things[1:3] - вернет ["orange", "pear"]
things.append('banana')

colors = {'sky':'blue','sea':'blue','earth':'brown'} - словарь
colors['sea'] = 'green'
colors.keys()
del(colors['sky'])

try:
	5/0
exept:
	print("Division by zero", sys.exc_info()[0])

Bottle Framework: простой и удобный http сервер для python.
Помимо этого, в него встроены маршрутизация и шаблонизатор.

return bottle.template("main", things) - вернет шаблон main

В шаблоне:
{{переменная}}
%for thing in things:
	{{thing}}
%end

Например, обработка формы:
@bottle.post('/form')
def form():
	fruit = bottle.request.forms.get('fruit')
	if(fruit == None or fruit == "")
		fruit = "No fruit selected"
	bottle.response.set_cookie("fruit", fruit)


